{"mappings":"iiBAAAA,EAAA,SCAA,IAAAC,EAAAD,EAAA,S,uCAEIE,EAAc,EACdC,EAAa,EACXC,EAAUC,SAASC,cAAc,mB,SAaxBC,I,OAAAC,EAAYC,MAAAC,KAAAC,U,UAAZH,I,OAAAA,EAAfI,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,I,IAA4BC,EACpBC,EACAC,EAEEC,EAC2BC,EAAzBC,EAASC,EAAWC,EAAAZ,U,yEALJK,EAAAO,EAAAC,OAAA,YAAAD,EAAA,GAAQA,EAAA,GAAD,EAC3BN,EAAU,mCACVC,EAAM,kEAAkFO,OAAhBT,EAAK,aAAmBS,OAARR,G,kBAErES,EAAAC,QAAMC,IAAIV,G,OAA3BC,EAAQU,EAAAC,KACmBV,EAAAD,EAASY,KAAlCV,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,YACjBnB,EAAamB,EACbU,EAAcX,GACdY,EAAwBjB,G,kDAExBkB,QAAQC,MAAM,iCAAgCN,EAAAO,IAC9CxB,EAAAyB,GAASC,OAAOC,QACd,2D,0DAZS/B,EAAYC,MAAAC,KAAAC,U,CAVN,CAAC,cAAe,IAAK,UAAW,qBACjC6B,MAChB,SAAAC,G,OACEC,OAAOC,SAASC,WAAaH,GAC7BC,OAAOC,SAASC,SAASC,WAAWJ,EAAO,I,MAG3BC,OAAOC,SAASC,SAASE,SAAS,qBACtDvC,EAAaL,GAkBf,IAAM6C,EAAW,CACf,GAAI,SACJ,GAAI,YACJ,GAAI,YACJ,GAAI,SACJ,GAAI,QACJ,GAAI,cACJ,GAAI,QACJ,MAAO,SACP,GAAI,UACJ,GAAI,UACJ,GAAI,SACJ,MAAO,QACP,KAAM,UACN,MAAO,UACP,IAAK,kBACL,MAAO,WACP,GAAI,WACJ,MAAO,MACP,GAAI,WAEC,SAASf,EAAcgB,GAC5B,IACMC,EAASD,EACZE,KAAI,SAAAC,G,IAAGC,EAAED,EAAFE,GAAIC,EAAWH,EAAXG,YAAaC,EAAcJ,EAAdI,eAAgBC,EAASL,EAATK,UAAWC,EAAYN,EAAZM,aAC5CC,EAAkBF,EAAUN,KAAI,SAAAG,G,OAAMN,EAASM,E,IAAKM,KAAK,MACzDC,EAAcH,EAAeA,EAAaI,MAAM,KAAK,GAAK,GAChE,MAAO,kEAIDpC,OAFmB2B,EAAG,oEAGd3B,OAVG,kCASI6B,EAChB,WAGuB7B,OAHd8B,EAAe,mGAII9B,OADL8B,EAAe,+CACW9B,OAArBiC,EAAgB,OAAiBjC,OAAZmC,EAAY,2C,IAKnED,KAAK,IACRvD,EAAQ0D,UAAYb,EAEnB5C,SAAQ0D,iBAAiB,gBAAgBC,SAAQ,SAAAC,GACjB,I,EAA/BA,EAAOC,iBAAiB,S,EAAStD,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,EAAMoD,G,IAE/Bd,E,yEADNc,EAAMC,iBACAf,EAAKc,EAAME,cAAcC,aAAa,W,SACtCC,EAAUlB,G,oDAHqBc,G,qCAOpC,SAASlC,EAAwBjB,GACtC,IAAMwD,EAAanE,SAASC,cAAc,SACpCmE,EAAapE,SAASC,cAAc,SACpCoE,EAAcrE,SAAS0D,iBAAiB,aAC9CS,EAAWG,SAAoB,IAAT3D,EACtByD,EAAWE,SAAW3D,IAASb,EAC/BuE,EAAYV,SAAQ,SAAAY,GAClB,IAAIA,EAAOC,QAAQC,MAAnB,CACA,IAAMC,EAAUC,SAASJ,EAAOvB,GAAGQ,MAAM,KAAK,GAAI,IAClDe,EAAOK,UAAUC,OAAO,SAAUH,IAAY/D,EAFpB,C,aA0BRuD,EAAUlB,G,OAAV8B,EAAS1E,MAAAC,KAAAC,U,UAATwE,I,OAAAA,EAAfvE,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,EAAyBsC,G,IAExBnC,EAEEC,EACAiE,EAEAC,EAuCJC,EASOC,E,yEAATA,EAAA,WACED,EAAME,MAAMC,QAAU,M,EAvDV,mCACVvE,EAAM,sCAAoDO,OAAd4B,EAAG,aAAmB5B,OADxD,oC,kBAGSC,EAAAC,QAAMC,IAAIV,G,OAA3BC,EAAQU,EAAAC,KACRsD,EAAYjE,EAASY,KACN,kCACfsD,EAAe,+JAKP5D,OANO,kCAKA2D,EAAU9B,YAC1B,WAEiC7B,OAFxB2D,EAAUM,MAAM,6GAKAjE,OAHQ2D,EAAUM,MAAM,6IAIpDjE,OAD4B2D,EAAUO,aAAa,OAMvBlE,OAL5B2D,EAAUQ,WACX,+JAQ6BnE,OAJA2D,EAAUS,WAAW,mKAQrBpE,OAJA2D,EAAU7B,eAAe,0JAUzB9B,OANA2D,EAAUU,OAC7B5C,KAAI,SAAA6C,G,OAASA,EAAMC,I,IACnBrC,KAAK,MAAM,wJAI2BlC,OAAnB2D,EAAUa,SAAS,2TAS/CX,EAAQjF,SAASC,cAAc,0BAE/BgF,EAAQjF,SAAS6F,cAAc,QACzBjB,UAAUkB,IAAI,qBACpB9F,SAAS+F,KAAKC,YAAYf,IAG5BA,EAAMxB,UAAYuB,EAClBC,EAAME,MAAMC,QAAU,QAItBH,EACGhF,cAAc,6BACd4D,iBAAiB,QAASqB,GAC7B7C,OAAOwB,iBAAiB,SAAS,SAAAC,GAC3BA,EAAMmC,SAAWhB,GACnBC,G,IAGJ7C,OAAOwB,iBAAiB,WAAW,SAAAC,GACf,WAAdA,EAAMoC,KACRhB,G,IAGJiB,EAAkB,UAAWpB,EAAU/B,GAAI,kBAC3CmD,EAAkB,QAASpB,EAAU/B,GAAI,gBACzChD,SAASoG,eAAe,kBAAkBvC,iBAAiB,SAAS,WAClEwC,EAAqB,UAAWtB,GAChCoB,EAAkB,UAAWpB,EAAU/B,GAAI,iB,IAE7ChD,SAASoG,eAAe,gBAAgBvC,iBAAiB,SAAS,WAChEwC,EAAqB,QAAStB,GAC9BoB,EAAkB,QAASpB,EAAU/B,GAAI,e,sDAG3CnB,QAAQC,MAAM,gCAA+BN,EAAAO,IAC7CxB,EAAAyB,GAASC,OAAOC,QACd,0D,2DApFyB9B,MAAAC,KAAAC,U,CAwF/B,SAAS+F,EAAqBC,EAASC,GACrC,IAAIC,EAASC,KAAKC,MAAMC,aAAaC,QAAQN,KAAa,GACpDO,EAAaL,EAAOM,WAAU,SAAAC,G,OAAKA,EAAE/D,KAAOuD,EAAMvD,E,KACrC,IAAf6D,GACFL,EAAOQ,KAAKT,GACZhG,EAAAyB,GAASC,OAAOgF,KACd,+BAAqD7F,OAAtBkF,EAAQY,kBAGzCV,EAAOW,OAAON,EAAY,GAC1BtG,EAAAyB,GAASC,OAAOgF,KACd,mCAAyD7F,OAAtBkF,EAAQY,iBAG/CP,aAAaS,QAAQd,EAASG,KAAKY,UAAUb,G,CAM/C,SAASL,EAAkBG,EAAStD,EAAIsE,GACtC,IAAMC,EALR,SAA6BjB,EAAStD,GAEpC,OADeyD,KAAKC,MAAMC,aAAaC,QAAQN,KAAa,IAC9CnE,MAAK,SAAAoE,G,OAASA,EAAMvD,KAAOA,C,IAGrBwE,CAAoBlB,EAAStD,GAC3CuB,EAASvE,SAASoG,eAAekB,GAErC/C,EAAOkD,YADLF,EACmB,eAAqCnG,OAAtBkF,EAAQY,eAEvB,UAAgC9F,OAAtBkF,EAAQY,c,CAvI3ClH,SAASC,cAAc,SAAS4D,iBAAiB,SAAS,WACpDhE,EAAc,GAEhBK,IADAL,E,IAIJG,SAASC,cAAc,SAAS4D,iBAAiB,SAAS,WACpDhE,EAAcC,GAEhBI,IADAL,E,IAIJG,SAAS0D,iBAAiB,aAAaC,SAAQ,SAAAY,GACzCA,EAAOC,QAAQC,OACnBF,EAAOV,iBAAiB,SAAS,WAC/B,IAAMlD,EAAOgE,SAASJ,EAAOvB,GAAGQ,MAAM,KAAK,GAAI,IAE/CtD,EADAL,EAAcc,E,kBCjHlB,IAAM+G,EAAkB1H,SAASC,cAAc,qBAE/CyH,EAAgBvC,MAAMC,QAAU,OAChCsC,EAAgBvC,MAAMwC,eAAiB,SAEvCtF,OAAOwB,iBAAiB,QAAQ,WAC9B+D,YAAW,WACTF,EAAgBvC,MAAMC,QAAU,M,GAC/B,I,ICRLxF,EAAAD,EAAA,S,uCAGAK,SAAS6D,iBAAiB,oBAAoB,WAC5C,I,EAAMgE,EAAa7H,SAASC,cAAc,gBACpC6H,EAAcD,EAAW5H,cAAc,uBACvC8H,EAAU/H,SAASC,cAAc,mBAwBvC,SAAS+H,EAAcrF,GACrB,IACMC,EAASD,EACZE,KAAI,SAAAC,G,IAAGE,EAAEF,EAAFE,GAAIC,EAAWH,EAAXG,YAAaC,EAAcJ,EAAdI,eAAgBE,EAAYN,EAAZM,aACvC,MAAO,sEAIDhC,OAFmB4B,EAAG,sEAGd5B,OARG,kCAOI6B,EAChB,WAGuB7B,OAHd8B,EAAe,yGAII9B,OADL8B,EAAe,iDACG9B,OAAbgC,EAAa,iD,IAK/CE,KAAK,IACRzB,QAAQoG,IAAI,oBAAqBrF,GACjCmF,EAAQtE,UAAYb,C,CA3CtBiF,EAAWhE,iBAAiB,U,EAAUtD,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,EAAMwH,G,IAEpCC,EAOEtH,EAGAC,EACEE,E,qEAZVkH,EAAEnE,iBACIoE,EAAcL,EAAYM,MAAMC,OACtCxG,QAAQoG,IAAI,gBAAiBE,GACT,KAAhBA,EAAkB,C,gEAKdtH,EAAM,qDAAsEO,OADlE,mCACyD,WAEvEA,OAFgFkH,mBAChFH,I,UAEqB9G,EAAAC,QAAMC,IAAIV,G,QAA3BC,EAAQU,EAAAC,KACRT,EAAcF,EAASY,KAArBV,QACRa,QAAQoG,IAAI,kBAAmBjH,GAC/BgH,EAAchH,G,kDAEda,QAAQC,MAAM,yBAAwBN,EAAAO,IACtCxB,EAAAyB,GAASC,OAAOC,QACd,mD,mEAnBsCgG,G,kCA6C5CH,EAAQlE,iBAAiB,QAAO,W,MAAEtD,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,EAAMoD,G,IAEhCyE,E,kEADNzE,EAAMC,kBACAwE,EAAazE,EAAMmC,OAAOuC,QAAQ,kBAGtCtE,EADWqE,EAAW/D,QAAQxB,I,2DAJMc,G,gCAAR,G,ICnDlClE,EAAAD,EAAA,S,aCWO,SAAS8I,EAAcC,GACfA,C,UDTOC,I,OAAAC,EAAYxI,MAAAC,KAAAC,U,UAAZsI,I,OAAAA,EAAfrI,EAAAX,EAAA,CAAAW,EAAAC,GAAAC,MAAA,SAAAC,I,IAA4BC,EAC3BC,EACAC,EAEEC,EAC2BC,EAAzBC,EAAoBE,EAAAZ,U,yEALGK,EAAAO,EAAAC,OAAA,YAAAD,EAAA,GAAQA,EAAA,GAAD,EAClCN,EAAU,mCACVC,EAAM,kEAAkFO,OAAhBT,EAAK,aAAmBS,OAARR,G,kBAErEiI,MAAMtH,IAAIV,G,OAA3BC,EAAQU,EAAAC,KACmBV,EAAAD,EAASY,KAAlCV,EAAyBD,EAAzBC,QACRyH,EADiC1H,EAAhBE,aAEjBU,EAAcX,GACdY,I,kDAEAC,QAAQC,MAAM,uBAAsBN,EAAAO,I,0DAVlB6G,EAAYxI,MAAAC,KAAAC,U,uBEElBN,SAASC,cAAc,mBFcnCD,SAAOC,cAAc,SAAS4D,iBAAiB,SAAS,WACpDiF,YAAc,IAChBA,cACAH,EAAaG,a,IAIf9I,SAAOC,cAAc,SAAS4D,iBAAiB,SAAS,WACpDiF,YAAcC,aAChBD,cACAH,EAAaG,a,IAIf9I,SAAO0D,iBAAiB,aAAaC,SAAQ,SAAAY,GACzCA,EAAOC,QAAQC,OACnBF,EAAOV,iBAAiB,SAAS,WAClBc,SAASJ,EAAOvB,GAAGQ,MAAM,KAAK,GAAI,IAC/CsF,YAAc,OACdH,EAAaG,Y,OAKI,CAAC,cAAe,IAAK,UAAW,qBACjC3G,MAChB,SAAAC,G,OACEC,OAAOC,SAASC,WAAaH,GAC7BC,OAAOC,SAASC,SAASC,WAAWJ,EAAO,I,MAI3BC,OAAOC,SAASC,SAASE,SAAS,qBACtDkG,EAAaG,Y","sources":["src/index.js","src/js/cards.js","src/js/spinner.js","src/js/search.js","src/js/apifetch.js","src/js/pagination.js","src/js/imports.js"],"sourcesContent":["import './js/footer.js';\nimport './js/cards';\nimport './js/dark-mode';\nimport './js/spinner.js';\nimport './js/search.js';\nimport './js/apifetch.js';\nimport './js/pagination.js';\nimport './js/modal.js';\nimport './js/imports.js';\nimport { setupPagination } from './js/apifetch.js';\nsetupPagination();\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nlet currentPage = 1;\nlet totalPages = 1;\nconst gallery = document.querySelector('.galleryPopular');\n// Verificare dacă suntem pe pagina corectă pentru a apela fetchPosters\nconst isValidPage = () => {\n  const validPaths = ['/index.html', '/', '/team6/', '/team6/index.html'];\n  return validPaths.some(\n    path =>\n      window.location.pathname === path ||\n      window.location.pathname.startsWith(path + '/')\n  );\n};\nif (isValidPage() && !window.location.pathname.includes('/my-library.html')) {\n  fetchPosters(currentPage);\n}\nasync function fetchPosters(page = 1) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/popular?language=en-US&page=${page}&api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const { results, total_pages } = response.data;\n    totalPages = total_pages;\n    renderGallery(results);\n    updatePaginationButtons(page);\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    Notiflix.Notify.failure(\n      'Failed to fetch popular movies. Please try again later.'\n    );\n  }\n}\nconst genreMap = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\nexport function renderGallery(posters) {\n  const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const markup = posters\n    .map(({ id, poster_path, original_title, genre_ids, release_date }) => {\n      const formattedGenres = genre_ids.map(id => genreMap[id]).join(', ');\n      const releaseYear = release_date ? release_date.split('-')[0] : '';\n      return `\n      <div class=\"div-poster\">\n        <a href=\"#\" data-id=\"${id}\" class=\"poster-link\">\n          <img class=\"poster-card\" src=\"${\n            BASE_IMG_URL + poster_path\n          }\" alt=\"${original_title}\" loading=\"lazy\" />\n        </a>\n        <div class=\"info\">\n          <p class=\"info-title\">${original_title}</p>\n          <p class=\"info-genre-year\">${formattedGenres} | ${releaseYear}</p>\n        </div>\n      </div>\n    `;\n    })\n    .join('');\n  gallery.innerHTML = markup;\n  // Adăugare event listener pentru fiecare poster-link\n  document.querySelectorAll('.poster-link').forEach(poster => {\n    poster.addEventListener('click', async event => {\n      event.preventDefault();\n      const id = event.currentTarget.getAttribute('data-id');\n      await openModal(id);\n    });\n  });\n}\nexport function updatePaginationButtons(page) {\n  const prevButton = document.querySelector('.prev');\n  const nextButton = document.querySelector('.next');\n  const pageButtons = document.querySelectorAll('.page-btn');\n  prevButton.disabled = page === 1;\n  nextButton.disabled = page === totalPages;\n  pageButtons.forEach(button => {\n    if (button.dataset.shown) return; // Skip step buttons\n    const pageNum = parseInt(button.id.split('-')[1], 10);\n    button.classList.toggle('active', pageNum === page);\n  });\n}\ndocument.querySelector('.prev').addEventListener('click', () => {\n  if (currentPage > 1) {\n    currentPage--;\n    fetchPosters(currentPage);\n  }\n});\ndocument.querySelector('.next').addEventListener('click', () => {\n  if (currentPage < totalPages) {\n    currentPage++;\n    fetchPosters(currentPage);\n  }\n});\ndocument.querySelectorAll('.page-btn').forEach(button => {\n  if (button.dataset.shown) return; // Skip step buttons\n  button.addEventListener('click', () => {\n    const page = parseInt(button.id.split('-')[1], 10);\n    currentPage = page;\n    fetchPosters(currentPage);\n  });\n});\n// Funcția pentru deschiderea modalului\nexport async function openModal(id) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const movieData = response.data;\n    const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n    const modalContent = `\n      <div class=\"cards-modal-content\">\n        <span class=\"cards-modal-close-button\">&times;</span>\n        <img class=\"cards-modal-poster-card\" src=\"${\n          BASE_IMG_URL + movieData.poster_path\n        }\" alt=\"${movieData.title}\" loading=\"lazy\" />\n        <div class=\"cards-modal-div-info\">\n          <h2 class=\"cards-modal-title\">${movieData.title}</h2>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Vote / Votes</span>\n            <span class=\"value\">${movieData.vote_average} / ${\n      movieData.vote_count\n    }</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Popularity</span>\n            <span class=\"value\">${movieData.popularity}</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Original Title</span>\n            <span class=\"value\">${movieData.original_title}</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Genre</span>\n            <span class=\"value\">${movieData.genres\n              .map(genre => genre.name)\n              .join(', ')}</span>\n          </div>\n          <div class=\"cards-modal-about\">\n            <span class=\"label\">About</span>\n            <span class=\"value\">${movieData.overview}</span>\n          </div>\n          <div class=\"cards-modal-buttons\">\n            <button id=\"toggle-watched\" class=\"cards-modal-button watch\">Loading...</button>\n            <button id=\"toggle-queue\" class=\"cards-modal-button queue\">Loading...</button>\n          </div>\n        </div>\n      </div>\n    `;\n  let modal = document.querySelector('.cards-modal-modal');\n    if (!modal) {\n      modal = document.createElement('div');\n      modal.classList.add('cards-modal-modal');\n      document.body.appendChild(modal);\n    }\n    \n    modal.innerHTML = modalContent;\n    modal.style.display = 'block';\n    function closeModal() {\n      modal.style.display = 'none';\n    }\n    modal\n      .querySelector('.cards-modal-close-button')\n      .addEventListener('click', closeModal);\n    window.addEventListener('click', event => {\n      if (event.target === modal) {\n        closeModal();\n      }\n    });\n    window.addEventListener('keydown', event => {\n      if (event.key === 'Escape') {\n        closeModal();\n      }\n    });\n    updateButtonState('watched', movieData.id, 'toggle-watched');\n    updateButtonState('queue', movieData.id, 'toggle-queue');\n    document.getElementById('toggle-watched').addEventListener('click', () => {\n      toggleMovieInLibrary('watched', movieData);\n      updateButtonState('watched', movieData.id, 'toggle-watched');\n    });\n    document.getElementById('toggle-queue').addEventListener('click', () => {\n      toggleMovieInLibrary('queue', movieData);\n      updateButtonState('queue', movieData.id, 'toggle-queue');\n    });\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    Notiflix.Notify.failure(\n      'Failed to fetch movie details. Please try again later.'\n    );\n  }\n}\nfunction toggleMovieInLibrary(section, movie) {\n  let movies = JSON.parse(localStorage.getItem(section)) || [];\n  const movieIndex = movies.findIndex(m => m.id === movie.id);\n  if (movieIndex === -1) {\n    movies.push(movie);\n    Notiflix.Notify.info(\n      `The movie has been added to ${section.toUpperCase()}`\n    );\n  } else {\n    movies.splice(movieIndex, 1);\n    Notiflix.Notify.info(\n      `The movie has been removed from ${section.toUpperCase()}`\n    );\n  }\n  localStorage.setItem(section, JSON.stringify(movies));\n}\nfunction checkMovieInLibrary(section, id) {\n  const movies = JSON.parse(localStorage.getItem(section)) || [];\n  return movies.some(movie => movie.id === id);\n}\nfunction updateButtonState(section, id, buttonId) {\n  const isInLibrary = checkMovieInLibrary(section, id);\n  const button = document.getElementById(buttonId);\n  if (isInLibrary) {\n    button.textContent = `Remove from ${section.toUpperCase()}`;\n  } else {\n    button.textContent = `Add to ${section.toUpperCase()}`;\n  }\n}\n","const loaderContainer = document.querySelector('.loader-container');\n\nloaderContainer.style.display = 'flex';\nloaderContainer.style.justifyContent = 'center';\n\nwindow.addEventListener('load', function () {\n  setTimeout(function () {\n    loaderContainer.style.display = 'none';\n  }, 500);\n});\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nimport { openModal } from './cards.js';\ndocument.addEventListener('DOMContentLoaded', () => {\n  const searchForm = document.querySelector('.header-form');\n  const searchInput = searchForm.querySelector('.header-form__input');\n  const gallery = document.querySelector('.galleryPopular');\n  searchForm.addEventListener('submit', async e => {\n    e.preventDefault();\n    const searchQuery = searchInput.value.trim();\n    console.log('Search Query:', searchQuery); // Log the search query\n    if (searchQuery === '') {\n      return;\n    }\n    try {\n      const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n      const URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(\n        searchQuery\n      )}`;\n      const response = await axios.get(URL);\n      const { results } = response.data;\n      console.log('Search Results:', results); // Log the search results\n      renderGallery(results);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      Notiflix.Notify.failure(\n        'Failed to fetch movies. Please try again later.'\n      );\n    }\n  });\n  function renderGallery(posters) {\n    const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n    const markup = posters\n      .map(({ id, poster_path, original_title, release_date }) => {\n        return `\n        <div class=\"div-poster\">\n          <a href=\"#\" data-id=\"${id}\" class=\"poster-link\">\n            <img class=\"poster-card\" src=\"${\n              BASE_IMG_URL + poster_path\n            }\" alt=\"${original_title}\" loading=\"lazy\" />\n          </a>\n          <div class=\"info\">\n            <p class=\"info-title\">${original_title}</p>\n            <p class=\"info-genre-year\">${release_date}</p>\n          </div>\n        </div>\n      `;\n      })\n      .join('');\n    console.log('Generated Markup:', markup); // Log the generated HTML markup\n    gallery.innerHTML = markup;\n  }\n  gallery.addEventListener('click', async event => {\n    event.preventDefault();\n    const posterLink = event.target.closest('.poster-link');\n    if (posterLink) {\n      const id = posterLink.dataset.id;\n      openModal(id);\n    }\n  });\n});\n","// apifetch.js\nimport { renderGallery, updatePaginationButtons } from './cards.js';\nimport { setTotalPages } from './pagination.js'; // Import the setter function\n\nexport async function fetchPosters(page = 1) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/popular?language=en-US&page=${page}&api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const { results, total_pages } = response.data;\n    setTotalPages(total_pages); // Use the setter function to update totalPages\n    renderGallery(results);\n    updatePaginationButtons();\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n// Definim funcția setupPagination\nexport function setupPagination() {\n  // Adăugăm event listener pentru butonul \"Previous\"\n  document.querySelector('.prev').addEventListener('click', () => {\n    if (currentPage > 1) {\n      currentPage--;\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina anterioară\n    }\n  });\n  // Adăugăm event listener pentru butonul \"Next\"\n  document.querySelector('.next').addEventListener('click', () => {\n    if (currentPage < totalPages) {\n      currentPage++;\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina următoare\n    }\n  });\n  // Adăugăm event listener pentru fiecare buton de paginare\n  document.querySelectorAll('.page-btn').forEach(button => {\n    if (button.dataset.shown) return; // Omitere butoanele de pas\n    button.addEventListener('click', () => {\n      const page = parseInt(button.id.split('-')[1], 10);\n      currentPage = 'page';\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina selectată\n    });\n  });\n  // Funcția pentru verificarea paginilor valide\n  const isValidPage = () => {\n    const validPaths = ['/index.html', '/', '/team6/', '/team6/index.html'];\n    return validPaths.some(\n      path =>\n        window.location.pathname === path ||\n        window.location.pathname.startsWith(path + '/')\n    );\n  };\n  // Verificăm dacă suntem pe o pagină validă și nu pe pagina \"my-library.html\"\n  if (isValidPage() && !window.location.pathname.includes('/my-library.html')) {\n    fetchPosters(currentPage); // Apelăm fetchPosters pentru pagina curentă\n  }\n}\n","// pagination.js\nlet currentPage = 1;\nlet totalPages = 0;\n\nexport function getCurrentPage() {\n  return currentPage;\n}\n\nexport function getTotalPages() {\n  return totalPages;\n}\n\nexport function setTotalPages(pages) {\n  totalPages = pages;\n}\n\nexport { currentPage, totalPages };\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nlet currentPage = 1;\nlet totalPages = 1;\nconst API_KEY = '904cc36a32d92a605c14a646cc21fc67';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst gallery = document.querySelector('.galleryPopular');\nconst genreMap = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n"],"names":["parcelRequire","$bpxeT","$ef840f7d396e5d99$var$currentPage","$ef840f7d396e5d99$var$totalPages","$ef840f7d396e5d99$var$gallery","document","querySelector","$ef840f7d396e5d99$var$fetchPosters","$ef840f7d396e5d99$var$_fetchPosters","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","page","API_KEY","URL","response","_data","results","total_pages","_args","length","concat","$dIxxU","default","get","_ctx","sent","data","$ef840f7d396e5d99$export$30b0ee8bdb5cac31","$ef840f7d396e5d99$export$48eb40023f41c0cc","console","error","t0","$ejkSG","Notify","failure","some","path","window","location","pathname","startsWith","includes","$ef840f7d396e5d99$var$genreMap","posters","markup","map","param","id1","id","poster_path","original_title","genre_ids","release_date","formattedGenres","join","releaseYear","split","innerHTML","querySelectorAll","forEach","poster","addEventListener","event","preventDefault","currentTarget","getAttribute","$ef840f7d396e5d99$export$a7f6cffb6b8ba11c","prevButton","nextButton","pageButtons","disabled","button","dataset","shown","pageNum","parseInt","classList","toggle","$ef840f7d396e5d99$var$_openModal","movieData","modalContent","modal","closeModal","style","display","title","vote_average","vote_count","popularity","genres","genre","name","overview","createElement","add","body","appendChild","target","key","$ef840f7d396e5d99$var$updateButtonState","getElementById","$ef840f7d396e5d99$var$toggleMovieInLibrary","section","movie","movies","JSON","parse","localStorage","getItem","movieIndex","findIndex","m","push","info","toUpperCase","splice","setItem","stringify","buttonId","isInLibrary","$ef840f7d396e5d99$var$checkMovieInLibrary","textContent","$dd8ebecfaae47a78$var$loaderContainer","justifyContent","setTimeout","searchForm","searchInput","gallery","renderGallery","log","e","searchQuery","value","trim","encodeURIComponent","posterLink","closest","$dfaf77c789ce7a24$export$a11d46610348f2d2","pages","$01c9a73df67c133f$export$56004c4a65d7e1bb","$01c9a73df67c133f$var$_fetchPosters","axios","currentPage","totalPages"],"version":3,"file":"index.8c39e4d1.js.map"}