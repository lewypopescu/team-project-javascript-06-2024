{"mappings":"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","sources":["src/index.js","src/js/cards.js","src/js/spinner.js","src/js/search.js","src/js/pagination.js","src/js/apifetch.js","src/js/imports.js"],"sourcesContent":["import './js/footer.js';\nimport './js/cards';\nimport './js/dark-mode';\nimport './js/spinner.js';\nimport './js/search.js';\nimport './js/apifetch.js';\nimport './js/pagination.js';\nimport './js/modal.js';\nimport './js/imports.js';\nimport { setupPagination } from './js/apifetch.js';\nsetupPagination();\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nlet currentPage = 1;\nlet totalPages = 1;\nconst gallery = document.querySelector('.galleryPopular');\n// Verificare dacă suntem pe pagina corectă pentru a apela fetchPosters\nconst isValidPage = () => {\n  const validPaths = ['/index.html', '/', '/team6/', '/team6/index.html'];\n  return validPaths.some(\n    path =>\n      window.location.pathname === path ||\n      window.location.pathname.startsWith(path + '/')\n  );\n};\nif (isValidPage() && !window.location.pathname.includes('/my-library.html')) {\n  fetchPosters(currentPage);\n}\nasync function fetchPosters(page = 1) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/popular?language=en-US&page=${page}&api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const { results, total_pages } = response.data;\n    totalPages = total_pages;\n    renderGallery(results);\n    updatePaginationButtons(page);\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    Notiflix.Notify.failure(\n      'Failed to fetch popular movies. Please try again later.'\n    );\n  }\n}\nconst genreMap = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\nexport function renderGallery(posters) {\n  const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const markup = posters\n    .map(({ id, poster_path, original_title, genre_ids, release_date }) => {\n      const formattedGenres = genre_ids.map(id => genreMap[id]).join(', ');\n      const releaseYear = release_date ? release_date.split('-')[0] : '';\n      return `\n      <div class=\"div-poster\">\n        <a href=\"#\" data-id=\"${id}\" class=\"poster-link\">\n          <img class=\"poster-card\" src=\"${\n            BASE_IMG_URL + poster_path\n          }\" alt=\"${original_title}\" loading=\"lazy\" />\n        </a>\n        <div class=\"info\">\n          <p class=\"info-title\">${original_title}</p>\n          <p class=\"info-genre-year\">${formattedGenres} | ${releaseYear}</p>\n        </div>\n      </div>\n    `;\n    })\n    .join('');\n  gallery.innerHTML = markup;\n  // Adăugare event listener pentru fiecare poster-link\n  document.querySelectorAll('.poster-link').forEach(poster => {\n    poster.addEventListener('click', async event => {\n      event.preventDefault();\n      const id = event.currentTarget.getAttribute('data-id');\n      await openModal(id);\n    });\n  });\n}\nexport function updatePaginationButtons(page) {\n  const prevButton = document.querySelector('.prev');\n  const nextButton = document.querySelector('.next');\n  const pageButtons = document.querySelectorAll('.page-btn');\n  prevButton.disabled = page === 1;\n  nextButton.disabled = page === totalPages;\n  pageButtons.forEach(button => {\n    if (button.dataset.shown) return; // Skip step buttons\n    const pageNum = parseInt(button.id.split('-')[1], 10);\n    button.classList.toggle('active', pageNum === page);\n  });\n}\ndocument.querySelector('.prev').addEventListener('click', () => {\n  if (currentPage > 1) {\n    currentPage--;\n    fetchPosters(currentPage);\n  }\n});\ndocument.querySelector('.next').addEventListener('click', () => {\n  if (currentPage < totalPages) {\n    currentPage++;\n    fetchPosters(currentPage);\n  }\n});\ndocument.querySelectorAll('.page-btn').forEach(button => {\n  if (button.dataset.shown) return; // Skip step buttons\n  button.addEventListener('click', () => {\n    const page = parseInt(button.id.split('-')[1], 10);\n    currentPage = page;\n    fetchPosters(currentPage);\n  });\n});\n// Funcția pentru deschiderea modalului\nexport async function openModal(id) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const movieData = response.data;\n    const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n    const modalContent = `\n      <div class=\"cards-modal-content\">\n        <span class=\"cards-modal-close-button\">&times;</span>\n        <img class=\"cards-modal-poster-card\" src=\"${\n          BASE_IMG_URL + movieData.poster_path\n        }\" alt=\"${movieData.title}\" loading=\"lazy\" />\n        <div class=\"cards-modal-div-info\">\n          <h2 class=\"cards-modal-title\">${movieData.title}</h2>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Vote / Votes</span>\n            <span class=\"value\">${movieData.vote_average} / ${\n      movieData.vote_count\n    }</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Popularity</span>\n            <span class=\"value\">${movieData.popularity}</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Original Title</span>\n            <span class=\"value\">${movieData.original_title}</span>\n          </div>\n          <div class=\"cards-modal-details\">\n            <span class=\"label\">Genre</span>\n            <span class=\"value\">${movieData.genres\n              .map(genre => genre.name)\n              .join(', ')}</span>\n          </div>\n          <div class=\"cards-modal-about\">\n            <span class=\"label\">About</span>\n            <span class=\"value\">${movieData.overview}</span>\n          </div>\n          <div class=\"cards-modal-buttons\">\n            <button id=\"toggle-watched\" class=\"cards-modal-button watch\">Loading...</button>\n            <button id=\"toggle-queue\" class=\"cards-modal-button queue\">Loading...</button>\n          </div>\n        </div>\n      </div>\n    `;\n  let modal = document.querySelector('.cards-modal-modal');\n    if (!modal) {\n      modal = document.createElement('div');\n      modal.classList.add('cards-modal-modal');\n      document.body.appendChild(modal);\n    }\n    \n    modal.innerHTML = modalContent;\n    modal.style.display = 'block';\n    function closeModal() {\n      modal.style.display = 'none';\n    }\n    modal\n      .querySelector('.cards-modal-close-button')\n      .addEventListener('click', closeModal);\n    window.addEventListener('click', event => {\n      if (event.target === modal) {\n        closeModal();\n      }\n    });\n    window.addEventListener('keydown', event => {\n      if (event.key === 'Escape') {\n        closeModal();\n      }\n    });\n    updateButtonState('watched', movieData.id, 'toggle-watched');\n    updateButtonState('queue', movieData.id, 'toggle-queue');\n    document.getElementById('toggle-watched').addEventListener('click', () => {\n      toggleMovieInLibrary('watched', movieData);\n      updateButtonState('watched', movieData.id, 'toggle-watched');\n    });\n    document.getElementById('toggle-queue').addEventListener('click', () => {\n      toggleMovieInLibrary('queue', movieData);\n      updateButtonState('queue', movieData.id, 'toggle-queue');\n    });\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    Notiflix.Notify.failure(\n      'Failed to fetch movie details. Please try again later.'\n    );\n  }\n}\nfunction toggleMovieInLibrary(section, movie) {\n  let movies = JSON.parse(localStorage.getItem(section)) || [];\n  const movieIndex = movies.findIndex(m => m.id === movie.id);\n  if (movieIndex === -1) {\n    movies.push(movie);\n    Notiflix.Notify.info(\n      `The movie has been added to ${section.toUpperCase()}`\n    );\n  } else {\n    movies.splice(movieIndex, 1);\n    Notiflix.Notify.info(\n      `The movie has been removed from ${section.toUpperCase()}`\n    );\n  }\n  localStorage.setItem(section, JSON.stringify(movies));\n}\nfunction checkMovieInLibrary(section, id) {\n  const movies = JSON.parse(localStorage.getItem(section)) || [];\n  return movies.some(movie => movie.id === id);\n}\nfunction updateButtonState(section, id, buttonId) {\n  const isInLibrary = checkMovieInLibrary(section, id);\n  const button = document.getElementById(buttonId);\n  if (isInLibrary) {\n    button.textContent = `Remove from ${section.toUpperCase()}`;\n  } else {\n    button.textContent = `Add to ${section.toUpperCase()}`;\n  }\n}\n","const loaderContainer = document.querySelector('.loader-container');\n\nloaderContainer.style.display = 'flex';\nloaderContainer.style.justifyContent = 'center';\n\nwindow.addEventListener('load', function () {\n  setTimeout(function () {\n    loaderContainer.style.display = 'none';\n  }, 500);\n});\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nimport { openModal } from './cards.js';\ndocument.addEventListener('DOMContentLoaded', () => {\n  const searchForm = document.querySelector('.header-form');\n  const searchInput = searchForm.querySelector('.header-form__input');\n  const gallery = document.querySelector('.galleryPopular');\n  searchForm.addEventListener('submit', async e => {\n    e.preventDefault();\n    const searchQuery = searchInput.value.trim();\n    console.log('Search Query:', searchQuery); // Log the search query\n    if (searchQuery === '') {\n      return;\n    }\n    try {\n      const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n      const URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(\n        searchQuery\n      )}`;\n      const response = await axios.get(URL);\n      const { results } = response.data;\n      console.log('Search Results:', results); // Log the search results\n      renderGallery(results);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      Notiflix.Notify.failure(\n        'Failed to fetch movies. Please try again later.'\n      );\n    }\n  });\n  function renderGallery(posters) {\n    const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n    const markup = posters\n      .map(({ id, poster_path, original_title, release_date }) => {\n        return `\n        <div class=\"div-poster\">\n          <a href=\"#\" data-id=\"${id}\" class=\"poster-link\">\n            <img class=\"poster-card\" src=\"${\n              BASE_IMG_URL + poster_path\n            }\" alt=\"${original_title}\" loading=\"lazy\" />\n          </a>\n          <div class=\"info\">\n            <p class=\"info-title\">${original_title}</p>\n            <p class=\"info-genre-year\">${release_date}</p>\n          </div>\n        </div>\n      `;\n      })\n      .join('');\n    console.log('Generated Markup:', markup); // Log the generated HTML markup\n    gallery.innerHTML = markup;\n  }\n  gallery.addEventListener('click', async event => {\n    event.preventDefault();\n    const posterLink = event.target.closest('.poster-link');\n    if (posterLink) {\n      const id = posterLink.dataset.id;\n      openModal(id);\n    }\n  });\n});\n","// pagination.js\nlet currentPage = 1;\nlet totalPages = 0;\n\nexport function getCurrentPage() {\n  return currentPage;\n}\n\nexport function getTotalPages() {\n  return totalPages;\n}\n\nexport function setTotalPages(pages) {\n  totalPages = pages;\n}\n\nexport { currentPage, totalPages };\n","// apifetch.js\nimport { renderGallery, updatePaginationButtons } from './cards.js';\nimport { setTotalPages } from './pagination.js'; // Import the setter function\n\nexport async function fetchPosters(page = 1) {\n  const API_KEY = '904cc36a32d92a605c14a646cc21fc67';\n  const URL = `https://api.themoviedb.org/3/movie/popular?language=en-US&page=${page}&api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n    const { results, total_pages } = response.data;\n    setTotalPages(total_pages); // Use the setter function to update totalPages\n    renderGallery(results);\n    updatePaginationButtons();\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n// Definim funcția setupPagination\nexport function setupPagination() {\n  // Adăugăm event listener pentru butonul \"Previous\"\n  document.querySelector('.prev').addEventListener('click', () => {\n    if (currentPage > 1) {\n      currentPage--;\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina anterioară\n    }\n  });\n  // Adăugăm event listener pentru butonul \"Next\"\n  document.querySelector('.next').addEventListener('click', () => {\n    if (currentPage < totalPages) {\n      currentPage++;\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina următoare\n    }\n  });\n  // Adăugăm event listener pentru fiecare buton de paginare\n  document.querySelectorAll('.page-btn').forEach(button => {\n    if (button.dataset.shown) return; // Omitere butoanele de pas\n    button.addEventListener('click', () => {\n      const page = parseInt(button.id.split('-')[1], 10);\n      currentPage = 'page';\n      fetchPosters(currentPage); // Apelăm fetchPosters cu pagina selectată\n    });\n  });\n  // Funcția pentru verificarea paginilor valide\n  const isValidPage = () => {\n    const validPaths = ['/index.html', '/', '/team6/', '/team6/index.html'];\n    return validPaths.some(\n      path =>\n        window.location.pathname === path ||\n        window.location.pathname.startsWith(path + '/')\n    );\n  };\n  // Verificăm dacă suntem pe o pagină validă și nu pe pagina \"my-library.html\"\n  if (isValidPage() && !window.location.pathname.includes('/my-library.html')) {\n    fetchPosters(currentPage); // Apelăm fetchPosters pentru pagina curentă\n  }\n}\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\nlet currentPage = 1;\nlet totalPages = 1;\nconst API_KEY = '904cc36a32d92a605c14a646cc21fc67';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst gallery = document.querySelector('.galleryPopular');\nconst genreMap = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n"],"names":["parcelRequire","$2shzp","$4b5d526dcb235765$var$currentPage","$4b5d526dcb235765$var$totalPages","$4b5d526dcb235765$var$gallery","document","querySelector","async","$4b5d526dcb235765$var$fetchPosters","page","URL","response","default","get","results","total_pages","data","$4b5d526dcb235765$export$30b0ee8bdb5cac31","$4b5d526dcb235765$export$48eb40023f41c0cc","error","console","$parcel$interopDefault","$1GAPJ","Notify","failure","some","path","window","location","pathname","startsWith","includes","$4b5d526dcb235765$var$genreMap","posters","markup","map","id","id1","poster_path","original_title","genre_ids","release_date","join","split","innerHTML","querySelectorAll","forEach","poster","addEventListener","event","preventDefault","currentTarget","getAttribute","$4b5d526dcb235765$export$a7f6cffb6b8ba11c","prevButton","nextButton","pageButtons","disabled","button","dataset","shown","pageNum","parseInt","classList","toggle","movieData","modalContent","title","vote_average","vote_count","popularity","genres","genre","name","overview","modal","closeModal","style","display","createElement","add","body","appendChild","target","key","$4b5d526dcb235765$var$updateButtonState","getElementById","$4b5d526dcb235765$var$toggleMovieInLibrary","section","movie","movies","JSON","parse","localStorage","getItem","movieIndex","findIndex","m","push","info","toUpperCase","splice","setItem","stringify","buttonId","isInLibrary","$4b5d526dcb235765$var$checkMovieInLibrary","textContent","$00cfbbdd8a53f936$var$loaderContainer","justifyContent","setTimeout","searchForm","searchInput","gallery","e","searchQuery","value","trim","log","encodeURIComponent","BASE_IMG_URL","renderGallery","posterLink","closest","$1bab9c519cfa82bc$export$828d4f39ed844b18","$f022bd453edfc391$export$56004c4a65d7e1bb","axios","currentPage","totalPages"],"version":3,"file":"index.d97f7cef.js.map"}